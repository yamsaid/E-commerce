#!/usr/bin/env python
"""
Test script pour v√©rifier le processus d'inscription
"""
import os
import sys
import django

# Add the project directory to the Python path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Set up Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'novalearnweb.settings')
django.setup()

from django.test import Client
from django.contrib.auth.models import User
from django.urls import reverse

def test_register_process():
    """Test du processus d'inscription"""
    client = Client(HTTP_HOST='127.0.0.1')
    
    print("=== Test du processus d'inscription ===\n")
    
    # 1. Test d'acc√®s √† la page d'inscription
    print("1. Test d'acc√®s √† la page d'inscription...")
    response = client.get('/register/')
    print(f"   Status code: {response.status_code}")
    if response.status_code == 200:
        print("   ‚úÖ Page d'inscription accessible")
    else:
        print("   ‚ùå Page d'inscription non accessible")
        return False
    
    # 2. Test d'inscription avec des donn√©es valides
    print("\n2. Test d'inscription avec des donn√©es valides...")
    
    # G√©n√©rer un nom d'utilisateur unique
    import time
    timestamp = int(time.time())
    test_username = f"testuser{timestamp}"
    test_email = f"test{timestamp}@example.com"
    
    register_data = {
        'username': test_username,
        'email': test_email,
        'password': 'TestPass123',
        'confirm_password': 'TestPass123',
        'terms': 'on'
    }
    
    response = client.post('/register/', register_data)
    print(f"   Status code: {response.status_code}")
    
    if response.status_code == 302:  # Redirection
        print(f"   ‚úÖ Inscription r√©ussie - Redirection vers: {response.url}")
        
        # V√©rifier que l'utilisateur a √©t√© cr√©√©
        try:
            user = User.objects.get(username=test_username)
            print(f"   ‚úÖ Utilisateur cr√©√©: {user.username} ({user.email})")
            print(f"   ‚úÖ Utilisateur actif: {user.is_active}")
            print(f"   ‚úÖ Utilisateur staff: {user.is_staff}")
        except User.DoesNotExist:
            print("   ‚ùå Utilisateur non trouv√© en base de donn√©es")
            return False
        
        # V√©rifier que la redirection va vers la page de connexion
        if 'login' in response.url:
            print("   ‚úÖ Redirection correcte vers la page de connexion")
        else:
            print(f"   ‚ö†Ô∏è  Redirection vers: {response.url} (attendu: page de connexion)")
            
    else:
        print("   ‚ùå √âchec de l'inscription")
        print(f"   Contenu de la r√©ponse: {response.content[:500]}...")
        return False
    
    # 3. Test d'inscription avec des donn√©es invalides
    print("\n3. Test d'inscription avec des donn√©es invalides...")
    
    # Test avec un nom d'utilisateur trop court
    invalid_data = {
        'username': 'ab',  # Trop court
        'email': 'invalid@example.com',
        'password': 'weak',
        'confirm_password': 'weak',
        'terms': 'on'
    }
    
    response = client.post('/register/', invalid_data)
    print(f"   Status code: {response.status_code}")
    
    if response.status_code == 200:  # Pas de redirection = erreur
        print("   ‚úÖ Validation des erreurs fonctionne")
    else:
        print("   ‚ùå Validation des erreurs ne fonctionne pas")
    
    # 4. Test d'inscription avec un nom d'utilisateur existant
    print("\n4. Test d'inscription avec un nom d'utilisateur existant...")
    
    duplicate_data = {
        'username': test_username,  # Utilisateur d√©j√† cr√©√©
        'email': 'another@example.com',
        'password': 'TestPass123',
        'confirm_password': 'TestPass123',
        'terms': 'on'
    }
    
    response = client.post('/register/', duplicate_data)
    print(f"   Status code: {response.status_code}")
    
    if response.status_code == 200:  # Pas de redirection = erreur
        print("   ‚úÖ D√©tection du nom d'utilisateur en double")
    else:
        print("   ‚ùå √âchec de la d√©tection du nom d'utilisateur en double")
    
    # 5. Test de connexion apr√®s inscription
    print("\n5. Test de connexion apr√®s inscription...")
    
    login_data = {
        'username': test_username,
        'password': 'TestPass123'
    }
    
    response = client.post('/login/', login_data)
    print(f"   Status code: {response.status_code}")
    
    if response.status_code == 302:
        print("   ‚úÖ Connexion r√©ussie apr√®s inscription")
    else:
        print("   ‚ùå √âchec de la connexion apr√®s inscription")
    
    # 6. Nettoyage - Supprimer l'utilisateur de test
    print("\n6. Nettoyage...")
    try:
        user = User.objects.get(username=test_username)
        user.delete()
        print("   ‚úÖ Utilisateur de test supprim√©")
    except User.DoesNotExist:
        print("   ‚ö†Ô∏è  Utilisateur de test non trouv√© pour suppression")
    
    return True

def show_register_instructions():
    """Afficher les instructions pour l'inscription"""
    print(f"\n" + "="*70)
    print(f"üìã INSTRUCTIONS D'UTILISATION DE L'INSCRIPTION")
    print(f"="*70)
    
    print(f"\nüîê Processus d'inscription:")
    print(f"   1. L'utilisateur acc√®de √† /register/")
    print(f"   2. Il remplit le formulaire avec ses informations")
    print(f"   3. Validation c√¥t√© client et serveur")
    print(f"   4. Cr√©ation du compte en base de donn√©es")
    print(f"   5. Redirection vers la page de connexion")
    print(f"   6. Message de succ√®s affich√©")
    
    print(f"\n‚úÖ Validations effectu√©es:")
    print(f"   - Nom d'utilisateur unique (min 3 caract√®res)")
    print(f"   - Email valide et unique")
    print(f"   - Mot de passe s√©curis√© (8+ caract√®res, majuscule, chiffre)")
    print(f"   - Confirmation du mot de passe")
    print(f"   - Acceptation des conditions d'utilisation")
    
    print(f"\nüéØ Fonctionnalit√©s:")
    print(f"   - Validation en temps r√©el c√¥t√© client")
    print(f"   - Messages d'erreur explicites")
    print(f"   - Indicateurs de force du mot de passe")
    print(f"   - Redirection automatique vers la connexion")
    print(f"   - Pas de connexion automatique apr√®s inscription")
    
    print(f"\nüåê URLs:")
    print(f"   - Inscription: /register/")
    print(f"   - Connexion: /login/")
    print(f"   - Redirection apr√®s inscription: /login/")

if __name__ == '__main__':
    print("üöÄ Test du processus d'inscription\n")
    
    success = test_register_process()
    
    if success:
        print("\nüéâ Le processus d'inscription fonctionne correctement!")
        show_register_instructions()
    else:
        print("\nüí• Des probl√®mes ont √©t√© d√©tect√©s dans le processus d'inscription.")
        print("   Veuillez v√©rifier les vues et templates.")
        sys.exit(1)
