#!/usr/bin/env python
"""
Script de test pour v√©rifier les am√©liorations du syst√®me d'aper√ßus vid√©o
"""
import os
import sys
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'novalearnweb.settings')
django.setup()

from store.models import Product, VideoSequence
from django.test import RequestFactory
from store.views import sequence_video_preview
import json

def test_improved_video_preview():
    """Test du syst√®me d'aper√ßus vid√©o am√©lior√©"""
    print("=== Test du Syst√®me d'Aper√ßus Vid√©o Am√©lior√© ===\n")
    
    # 1. V√©rifier les am√©liorations de l'API
    print("1. Test de l'API am√©lior√©e:")
    
    # Trouver une s√©quence avec fichier pour le test
    test_sequence = VideoSequence.objects.filter(
        is_active=True,
        video_file__isnull=False
    ).first()
    
    if test_sequence:
        print(f"   - S√©quence de test: {test_sequence.title}")
        
        # Simuler une requ√™te
        factory = RequestFactory()
        request = factory.get(f'/api/sequence/{test_sequence.id}/preview/')
        
        try:
            response = sequence_video_preview(request, test_sequence.id)
            print(f"   - Statut de r√©ponse: {response.status_code}")
            
            if response.status_code == 200:
                # Analyser la r√©ponse JSON
                data = json.loads(response.content)
                sequence_data = data.get('sequence', {})
                
                print(f"   - ‚úÖ API fonctionnelle")
                print(f"   - Informations retourn√©es:")
                print(f"     * Titre: {sequence_data.get('title', 'N/A')}")
                print(f"     * Dur√©e: {sequence_data.get('duration', 'N/A')}")
                print(f"     * Ordre: {sequence_data.get('order', 'N/A')}")
                print(f"     * Aper√ßu: {sequence_data.get('is_preview', 'N/A')}")
                print(f"     * URL vid√©o: {sequence_data.get('video_url', 'N/A')}")
                print(f"     * Niveau: {sequence_data.get('level', 'N/A')}")
                print(f"     * ID Produit: {sequence_data.get('product_id', 'N/A')}")
                print(f"     * Slug Produit: {sequence_data.get('product_slug', 'N/A')}")
                print(f"     * Titre Produit: {sequence_data.get('product_title', 'N/A')}")
                print(f"     * Total s√©quences: {sequence_data.get('total_sequences', 'N/A')}")
                print(f"     * S√©quences d'aper√ßu: {sequence_data.get('preview_sequences', 'N/A')}")
                
                # V√©rifier que toutes les informations n√©cessaires sont pr√©sentes
                required_fields = ['id', 'title', 'duration', 'order', 'video_url', 'product_id', 'product_slug']
                missing_fields = [field for field in required_fields if not sequence_data.get(field)]
                
                if missing_fields:
                    print(f"   - ‚ö†Ô∏è  Champs manquants: {missing_fields}")
                else:
                    print(f"   - ‚úÖ Tous les champs requis sont pr√©sents")
                    
            else:
                print(f"   - ‚ùå Erreur API: {response.status_code}")
                
        except Exception as e:
            print(f"   - ‚ùå Erreur lors du test: {str(e)}")
    else:
        print(f"   - ‚ö†Ô∏è  Aucune s√©quence avec fichier trouv√©e pour le test")
    
    # 2. V√©rifier les am√©liorations de l'interface
    print(f"\n2. Am√©liorations de l'interface:")
    
    # Compter les s√©quences avec diff√©rents types d'informations
    sequences_with_description = VideoSequence.objects.filter(
        is_active=True,
        description__isnull=False
    ).exclude(description='').count()
    
    sequences_with_files = VideoSequence.objects.filter(
        is_active=True,
        video_file__isnull=False
    ).count()
    
    preview_sequences = VideoSequence.objects.filter(
        is_active=True,
        is_preview=True
    ).count()
    
    print(f"   - S√©quences avec description: {sequences_with_description}")
    print(f"   - S√©quences avec fichiers: {sequences_with_files}")
    print(f"   - S√©quences d'aper√ßu: {preview_sequences}")
    
    # 3. V√©rifier les produits avec s√©quences
    print(f"\n3. Produits avec s√©quences vid√©o:")
    
    products_with_sequences = Product.objects.filter(
        video_sequences__isnull=False
    ).distinct()
    
    for product in products_with_sequences[:3]:  # Afficher les 3 premiers
        sequences = product.video_sequences.filter(is_active=True)
        preview_count = sequences.filter(is_preview=True).count()
        
        print(f"   - {product.title}")
        print(f"     * Total s√©quences: {sequences.count()}")
        print(f"     * S√©quences d'aper√ßu: {preview_count}")
        print(f"     * Niveau: {product.level or 'Non sp√©cifi√©'}")
        
        # V√©rifier les fichiers physiques
        valid_sequences = 0
        for seq in sequences:
            if seq.video_file and os.path.exists(seq.video_file.path):
                valid_sequences += 1
        
        print(f"     * Fichiers valides: {valid_sequences}/{sequences.count()}")
    
    # 4. Test des nouvelles fonctionnalit√©s
    print(f"\n4. Nouvelles fonctionnalit√©s:")
    
    # V√©rifier les s√©quences avec descriptions d√©taill√©es
    detailed_sequences = VideoSequence.objects.filter(
        is_active=True,
        description__isnull=False
    ).exclude(description='').exclude(description__icontains='test')
    
    if detailed_sequences.exists():
        sample_sequence = detailed_sequences.first()
        print(f"   - ‚úÖ S√©quences avec descriptions d√©taill√©es disponibles")
        print(f"     * Exemple: {sample_sequence.title}")
        print(f"     * Description: {sample_sequence.description[:100]}...")
    else:
        print(f"   - ‚ö†Ô∏è  Aucune s√©quence avec description d√©taill√©e trouv√©e")
    
    # V√©rifier les produits avec niveaux
    products_with_levels = Product.objects.filter(
        video_sequences__isnull=False,
        level__isnull=False
    ).distinct().count()
    
    print(f"   - Produits avec niveaux d√©finis: {products_with_levels}")
    
    return True

def show_improvement_summary():
    """Afficher un r√©sum√© des am√©liorations"""
    print(f"\n" + "="*70)
    print(f"üìã R√âSUM√â DES AM√âLIORATIONS DU SYST√àME D'APER√áUS VID√âO")
    print(f"="*70)
    
    print(f"\nüé® Am√©liorations de l'Interface:")
    print(f"   ‚úÖ En-t√™te avec gradient et ic√¥ne de lecture")
    print(f"   ‚úÖ Panneau d'informations lat√©ral avec m√©tadonn√©es")
    print(f"   ‚úÖ Barre de progression en temps r√©el")
    print(f"   ‚úÖ Boutons d'action (t√©l√©chargement, voir toutes les s√©quences)")
    print(f"   ‚úÖ Contr√¥les suppl√©mentaires (plein √©cran, qualit√©)")
    print(f"   ‚úÖ Indicateurs de temps restant et compteur de vues")
    print(f"   ‚úÖ Overlay de chargement am√©lior√©")
    print(f"   ‚úÖ Gestion d'erreurs plus √©l√©gante")
    
    print(f"\nüîß Am√©liorations Techniques:")
    print(f"   ‚úÖ API enrichie avec plus d'informations")
    print(f"   ‚úÖ Gestionnaires d'√©v√©nements optimis√©s")
    print(f"   ‚úÖ Formatage intelligent du temps")
    print(f"   ‚úÖ Gestion du mode plein √©cran")
    print(f"   ‚úÖ R√©initialisation automatique des informations")
    print(f"   ‚úÖ Validation robuste des donn√©es")
    
    print(f"\nüìä Nouvelles Informations Disponibles:")
    print(f"   ‚úÖ Dur√©e r√©elle de la vid√©o")
    print(f"   ‚úÖ Niveau de difficult√©")
    print(f"   ‚úÖ Progression dans la formation")
    print(f"   ‚úÖ Nombre total de s√©quences")
    print(f"   ‚úÖ Nombre de s√©quences d'aper√ßu")
    print(f"   ‚úÖ Informations sur le produit parent")
    
    print(f"\nüåê Pour tester les am√©liorations:")
    print(f"   1. D√©marrez le serveur: python manage.py runserver 8000")
    print(f"   2. Allez sur une page produit avec s√©quences vid√©o")
    print(f"   3. Cliquez sur 'Aper√ßu' pour voir la nouvelle interface")
    print(f"   4. Explorez le panneau d'informations lat√©ral")
    print(f"   5. Testez les contr√¥les suppl√©mentaires")

if __name__ == "__main__":
    print("üöÄ Test des Am√©liorations du Syst√®me d'Aper√ßus Vid√©o\n")
    
    success = test_improved_video_preview()
    
    if success:
        print("\nüéâ Le syst√®me d'aper√ßus vid√©o am√©lior√© est pr√™t!")
        show_improvement_summary()
    else:
        print("\nüí• Des probl√®mes ont √©t√© d√©tect√©s dans les am√©liorations.")
        print("   Veuillez v√©rifier les modifications apport√©es.")
        sys.exit(1)
